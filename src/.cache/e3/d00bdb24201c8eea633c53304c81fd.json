{"id":"twitch/src/WebRequest/WebRequest.ts","dependencies":[{"name":"D:\\Dev\\cnc.community\\GitHub\\cnc.community\\src\\resources\\typescript\\twitch\\src\\tsconfig.json","includedInParent":true,"mtime":1589120117971},{"name":"D:\\Dev\\cnc.community\\GitHub\\cnc.community\\src\\package.json","includedInParent":true,"mtime":1589122128031}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar WebRequest =\n/** @class */\nfunction () {\n  function WebRequest(_path, _headers, _onCompleteCallback) {\n    this._path = _path;\n    this._headers = _headers;\n    this._onCompleteCallback = _onCompleteCallback;\n  }\n\n  WebRequest.prototype.get = function () {\n    var _this = this;\n\n    var request = new XMLHttpRequest();\n\n    if (request.overrideMimeType) {\n      request.overrideMimeType(\"application/json\");\n    }\n\n    request.addEventListener(\"readystatechange\", function (e) {\n      return _this.onWebRequestLoaded(e);\n    });\n    request.open(\"GET\", this._path, true);\n    this.addHeaders(request);\n    request.send(null);\n  };\n\n  WebRequest.prototype.post = function (formData) {\n    var _this = this;\n\n    var request = new XMLHttpRequest();\n\n    if (request.overrideMimeType) {\n      request.overrideMimeType(\"application/json\");\n    }\n\n    request.addEventListener(\"readystatechange\", function (e) {\n      return _this.onWebRequestLoaded(e);\n    });\n    request.open(\"POST\", this._path, true);\n    this.addHeaders(request);\n    request.send(formData);\n  };\n\n  WebRequest.prototype.addHeaders = function (request) {\n    for (var header in this._headers) {\n      request.setRequestHeader(header, this._headers[header]);\n    }\n  };\n\n  WebRequest.prototype.onWebRequestLoaded = function (e) {\n    var request = e.target;\n\n    if (request.readyState == 4) {\n      if (request.status == 200 || request.status == 0) {\n        try {\n          this.onComplete(request.responseText, null);\n        } catch (e) {\n          console.log(e);\n          this.onComplete(null, {\n            errorCode: -1,\n            errorMessage: \"Error parsing request\"\n          });\n        }\n      } else {\n        this.onComplete(null, {\n          errorMessage: request.responseText,\n          errorCode: request.status\n        });\n      }\n    }\n  };\n\n  WebRequest.prototype.onComplete = function (response, error) {\n    this._onCompleteCallback(response, error);\n  };\n\n  return WebRequest;\n}();\n\nexports.WebRequest = WebRequest;"},"sourceMaps":null,"error":null,"hash":"75a1d58f62132830a8fc577502806f5d","cacheData":{"env":{}}}